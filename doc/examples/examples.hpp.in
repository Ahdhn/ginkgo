// ---------------------------------------------------------------------
//
// Copyright (C) 2005 - 2018 by the Ginkgo authors
//
// This file is part of the Ginkgo library.
//
// The Ginkgo library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of Ginkgo.
//
// ---------------------------------------------------------------------


/**
 * @page Examples Example programs
 *
 * Here you can find Examples programs that demonstrate the usage of Ginkgo.
 * Some examples are built on another and some are stand-alone and demonstrate a concept of
 * Ginkgo, which can be used in your own code.
 *
 * You can browse the available example programs
 * <ol>
 *   <li> as <b><a href="#graph">a graph</a></b> that shows how example programs build upon each other.
 *   <li> as <b><a href="#list">a list</a></b> that provides a short
 *     synopsis of each program.
 *   <li> or <b><a href="#topic">grouped by topic</a></b>.
 * </ol>
 *
 * The easiest way to build the example that you want is to use the script provided:
 * <code>./build.sh PATH_TO_GINKGO_BUILD_DIR </code>
 *
 * Ginkgo should be compiled with atleast <code>-DGINKGO_BUILD_REFERENCE=on</code> option, so that
 * there is an executor available. To execute on a GPU, you need to have a GPU on the system and must have
 * compiled Ginko with the <code>-DGINKGO_BUILD_CUDA=on</code> option.
 *
 * Alternatively, you can setup the configuration manually:
 *
 * Go to the <code> PATH_TO_GINKGO_BUILD_DIR </code> directory and copy the shared
 * libraries located in the following subdirectories:
 * <ol>
 *   <li> <code>core/</code>
 *   <li> <code>core/device_hooks/</code>
 *   <li> <code>reference/</code>
 *   <li> <code>omp/</code>
 *   <li> <code>cuda/</code>
 * </ol>
 * to this directory.
 *
 * Then compile the file with the following command line:
 * @code{.cpp}
 * c++ -std=c++11 -o example-* example-*.cpp -I../.. \
 * -L. -lginkgo -lginkgo_reference -lginkgo_omp -lginkgo_cuda
 * @endcode
 * (if ginkgo was built in debug mode, append 'd' to every library name)
 *
 * Now you should be able to run the program using:
 *
 * @code{.cpp}env LD_LIBRARY_PATH=.:\$\{LD_LIBRARY_PATH\} ./example-*@endcode
 *
 * <a name="graph"></a>
 * @anchor ExampleConnectionGraph
 * <h3>Connections between example programs</h3>
 *
 * The following graph shows the connections between example programs and
 * how they build on each other.
 * Click on any of the boxes to go to one of the programs. If you hover
 * your mouse pointer over a box, a brief description of the program
 * should appear.
 * @dot
@@EXAMPLE_MAP@@
 * @enddot
 *
 * <b>Legend:</b><br />
 * @dot
@@EXAMPLE_LEGEND@@
 * @enddot
 *
 * <a name="list"></a>
 * <h3>Example programs listed by number</h3>
 *
 * <table align="center" width="90%">
 *   <tr valign="top">
 *       <td width="100px">example-1</td>
 *       <td> Simple solver. A minimal CG solver in Ginkgo. Read matrix from a file.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-2</td>
 *       <td> A first step solver with CUDA. Solve a linear system on NVIDIA GPU's.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-3</td>
 *       <td> Solve an actual physically relevant problem. Solving the poisson problem.
 *       Generate matrix within Ginkgo.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-4</td>
 *       <td> Using a preconditioner for a linear system solve. Using the Jacobi preconditioner.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-5</td>
 *       <td> Using a stencil to solve the poisson equation. Using array views.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-6</td>
 *       <td> Interfacing with an external library. Using ginkgo's solver with deal.ii.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-7</td>
 *       <td> Creating a matrix-free stencil solver. Using ginkgo's advanced methods to
 *        create your own custom matrix format to create a matrix free solver.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-8</td>
 *       <td> Using Ginkgo to compute eigenvalues of a matrix with the inverse iteration method.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-9</td>
 *       <td> Using the logging functionality in ginkgo to get solver and other information to
 *        diagnose and debug your code.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-10</td>
 *       <td> Using the PAPI logging library in Ginkgo to get advanced information about your code
 *        and its behaviour.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-11</td>
 *       <td> Measuring the overhead of the ginkgo library.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-12</td>
 *       <td> Creating a custom stopping criterion for the iterative solution process.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>example-13</td>
 *       <td> Using the ranges concept to factorize a matrix with the LU factorization.
 *       </td></tr>
 *
 * </table>
 *
 * <a name="topic"></a>
 * <h3>Example programs grouped by topics</h3>
 *
 * <h4><b>Basic techniques</b></h4>
 * <table align="center" width="90%">
 *
 *   <tr valign="top">
 *     <td> Solving a simple linear system with choice of executors.
 *     </td>
 *     <td>example-1
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using the CUDA executor
 *     </td>
 *     <td>example-2
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Using preconditioners
 *     </td>
 *     <td>example-4
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Solving a physically relevant problem
 *     </td>
 *     <td>example-3,
 *         example-5,
 *         example-7
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Reading in a matrix and right hand side from a file.
 *     </td>
 *     <td>example-1,
 *         example-2,
 *         example-4,
 *         example-8,
 *         example-9,
 *         example-10,
 *         example-12
 *     </td>
 *   </tr>
 *
 * </table>
 *
 * <h4><b>Advanced techniques</b></h4>
 * <table align="center" width="90%">
 *
 *   <tr valign="top">
 *     <td> Using ginkgo with external libraries. 
 *     </td>
 *     <td>example-6
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Writing your own matrix format 
 *     </td>
 *     <td>example-7
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using Ginkgo to construct more complex linear algebra routines.
 *     </td>
 *     <td> example-8
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Logging within Ginkgo.
 *     </td>
 *     <td> example-9,
 *          example-10
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Constructing your own stopping criterion.
 *     </td>
 *     <td> example-12
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using ranges in Ginkgo.
 *     </td>
 *     <td> example-13
 *     </td>
 *   </tr>
 * </table>
 */
